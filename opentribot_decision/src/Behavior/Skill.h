#ifndef _SKILL_H_
#define _SKILL_H_

#include "../Structures/DriveVector.h"
#include "../Structures/TribotsException.h"
#include "../Structures/TacticsBoard.h"
#include "../Fundamental/Time.h"

#include <string>

namespace Tribots {

//  using std::string;

  /** reactive or deliberative policy to generate drivevectors (actions).
   *  An implementation of skill may need one or more parameters every cycle
   *  before getCmd is called via a "local" method. Therefore, to use a
   *  skill, it is necessary to know its type and to know, how it functions.
   *  Generally, it's not recommended to call skills abstractly (have a look
   *  at the class Behavior instead). 
   * 
   *  \attention: Whereas the parameters necessary may be nearly everything,
   *              it is absolutely not desired to pass a drivevector generated
   *              by one skill to another, that modifies the original 
   *              drivevector. If one calls different skills to realize a more
   *              complex behavior, command vectors generated by a "sub"skill
   *              should be returned by all needs unmodified. */
  class Skill {
  public:
    virtual ~Skill() throw ();

    /**
     * generates a drivevector 
     * \param dv drivevector that will be filled by the method (output argument)
     * \param Time the expected execution time of the present command cycle 
     * \attention The drivevector dv is a pure output argument and should never
     *            be read by the skill. */
    virtual DriveVector getCmd(const Time&) throw(TribotsException)=0;

    /**
     * notifies the command generator, that it is to gain control during the
     * present control cycle. May be implemented by deliberative command 
     * generators. May throw an exception, if it's not able to gain control.
     * In such a case checkCommitmentCondition should return false.
     * \param Time the expected execution time of the present control cycle */
    virtual void gainControl(const Time&) throw(TribotsException) {}
    /**
     * notifies the command generator, that it is to loose control in the
     * present control cycle. May be implemented by deliberative command
     * generators. The behavior must accept to loose control in every possible
     * time step, if it was active.
     * \param Time the expected execution time of the present control cycle */
    virtual void loseControl(const Time&) throw(TribotsException) {}

    /**
     * this call back method is called every control cycle via a central registry.
     * \param Time timestamp when the generated command of this cycle will
     *        become active.
     */
    virtual void cycleCallBack(const Time&) throw() {}

    /** Taktische einstellungen aendern */
    virtual void updateTactics (const TacticsBoard&) throw () {;}

    virtual std::string getName() const { return name; }

  protected:
    Skill(std::string name="Skill"); ///< standard constructor
    std::string name;
  };

}

#endif
