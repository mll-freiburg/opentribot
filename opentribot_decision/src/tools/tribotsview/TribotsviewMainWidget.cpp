/****************************************************************************
** Form implementation generated from reading ui file 'TribotsviewMainWidget.ui'
**
** Created: Mon Aug 31 14:45:21 2009
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "TribotsviewMainWidget.h"

#include <qvariant.h>
#include <qstatusbar.h>
#include <qapplication.h>
#include <qpushbutton.h>
#include <qsplitter.h>
#include <qgroupbox.h>
#include <qslider.h>
#include <qtextedit.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qaction.h>
#include <qmenubar.h>
#include <qpopupmenu.h>
#include <qtoolbar.h>
#include <qimage.h>
#include <qpixmap.h>

#include "../components/FieldOfPlay.h"
#include "RotateView.h"
#include "TribotsviewMainWidget.ui.h"
static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
    0x5d, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x6d, 0x53, 0x3d, 0x48, 0x5b,
    0x51, 0x18, 0x3d, 0xca, 0x13, 0xbe, 0x0e, 0x85, 0x2b, 0x64, 0x78, 0x42,
    0x86, 0x17, 0xc8, 0xd0, 0x04, 0x87, 0x26, 0xa4, 0x90, 0x86, 0x0e, 0xea,
    0xa8, 0x5b, 0x82, 0x8b, 0xa1, 0x0e, 0x4a, 0x3a, 0x34, 0x28, 0x88, 0x69,
    0x41, 0xab, 0x96, 0x36, 0x43, 0xb1, 0xc5, 0xa1, 0x56, 0x2d, 0x48, 0x53,
    0x08, 0xbc, 0x2c, 0xe5, 0x69, 0x97, 0xa8, 0x43, 0x69, 0xb6, 0xbc, 0x42,
    0x21, 0x71, 0x10, 0x33, 0x1a, 0xb0, 0x50, 0x87, 0x0e, 0x96, 0x76, 0x50,
    0x8a, 0x70, 0x3a, 0xdc, 0x67, 0xc2, 0x2b, 0x3d, 0xcb, 0xe1, 0xdc, 0xbf,
    0x73, 0xbe, 0xef, 0xde, 0x0b, 0x00, 0xb0, 0x4d, 0xc9, 0x31, 0x20, 0xac,
    0x0e, 0xc5, 0xc8, 0x24, 0x59, 0x4d, 0x46, 0xc8, 0x64, 0x84, 0x4e, 0xc2,
    0x22, 0x13, 0xa4, 0x73, 0xdb, 0x22, 0x13, 0x16, 0x9d, 0x41, 0xad, 0x6d,
    0x25, 0x64, 0x50, 0xe5, 0x00, 0xa0, 0xc7, 0x0e, 0x48, 0x2e, 0x1b, 0x0e,
    0x6d, 0xb7, 0x57, 0xf2, 0x08, 0x7d, 0xaa, 0xa1, 0x29, 0x40, 0xdc, 0x10,
    0x34, 0x01, 0xc4, 0x0d, 0xf8, 0x59, 0xbc, 0x71, 0xb3, 0x84, 0xca, 0xd3,
    0x01, 0x64, 0x2f, 0x2f, 0x1f, 0x80, 0x01, 0x21, 0xf7, 0x37, 0xc8, 0x21,
    0x93, 0x1c, 0x8f, 0x91, 0x8c, 0xf1, 0xf3, 0xfd, 0xbb, 0x24, 0x49, 0xbe,
    0x9e, 0x27, 0x49, 0xd6, 0x67, 0x86, 0xb5, 0x9e, 0x1b, 0x25, 0x49, 0x36,
    0x16, 0xd2, 0x24, 0x75, 0x92, 0x9e, 0xea, 0xbd, 0x08, 0xc7, 0x86, 0x63,
    0xa8, 0x1d, 0x1d, 0x62, 0xa4, 0x5f, 0xc1, 0x95, 0x7e, 0xa4, 0xb6, 0xf6,
    0xf0, 0x2f, 0x2e, 0x8e, 0x5c, 0xdc, 0xf8, 0x58, 0x82, 0x7b, 0xf9, 0x13,
    0x29, 0x11, 0xb4, 0x02, 0x0a, 0xd1, 0xb7, 0xbb, 0x00, 0x93, 0x24, 0x17,
    0xd2, 0x24, 0x63, 0xac, 0xcf, 0x68, 0x87, 0x0e, 0xca, 0xaf, 0x34, 0xff,
    0xf2, 0xf4, 0x1f, 0x8f, 0x9f, 0x4d, 0x90, 0x24, 0x9d, 0xb0, 0x62, 0xef,
    0x0e, 0xa2, 0x80, 0x21, 0xa8, 0x4d, 0x02, 0xa9, 0xf5, 0xae, 0xb3, 0x3b,
    0x3b, 0x02, 0x4c, 0x16, 0x70, 0xfe, 0x65, 0x0f, 0x78, 0x91, 0xc1, 0xd9,
    0x41, 0x09, 0xe8, 0x03, 0x2e, 0x0e, 0x6b, 0x80, 0x08, 0x5a, 0x5b, 0x79,
    0x64, 0x00, 0x80, 0xc9, 0x08, 0x1b, 0xcb, 0x13, 0x3e, 0xe3, 0x4e, 0x12,
    0xcf, 0xb9, 0xb1, 0x9c, 0xf6, 0xeb, 0xd5, 0x29, 0x9d, 0xc0, 0x52, 0xec,
    0xdd, 0xb9, 0xba, 0x40, 0xdc, 0x00, 0x5a, 0xeb, 0x05, 0x00, 0x40, 0x7b,
    0x7b, 0x09, 0x29, 0x03, 0x70, 0x1f, 0x8f, 0x01, 0x37, 0x01, 0xfc, 0x3e,
    0xd3, 0xb7, 0xf2, 0x3c, 0xab, 0x35, 0x80, 0xb8, 0x19, 0x42, 0x6b, 0xbb,
    0xe0, 0x25, 0x48, 0x74, 0x6b, 0xea, 0xe0, 0x91, 0xdf, 0xb1, 0x33, 0xff,
    0xb5, 0xaa, 0x79, 0x77, 0x43, 0xdf, 0x42, 0x50, 0xd8, 0xbb, 0x73, 0x15,
    0x02, 0x0c, 0x68, 0x07, 0xaf, 0xdb, 0x30, 0x00, 0x77, 0x31, 0xe3, 0x25,
    0x38, 0x07, 0x0c, 0x41, 0xf3, 0xe5, 0x34, 0x70, 0x67, 0x4c, 0x47, 0xf8,
    0x91, 0x47, 0xeb, 0xfd, 0x12, 0xb2, 0x3a, 0x81, 0xc5, 0xc6, 0xea, 0x84,
    0xdf, 0xb1, 0x5c, 0xd4, 0x7c, 0xea, 0xaf, 0xf9, 0x1a, 0xc7, 0x25, 0x3d,
    0x6f, 0x9b, 0x42, 0x38, 0x83, 0x16, 0xb9, 0x36, 0xc5, 0xfa, 0xdc, 0x28,
    0xb9, 0xf6, 0xb0, 0xbb, 0xea, 0xe4, 0x98, 0x24, 0xf9, 0x7d, 0xff, 0x9d,
    0x6f, 0xf3, 0x49, 0xb9, 0x48, 0x56, 0x8a, 0x3c, 0xa9, 0x14, 0x49, 0x53,
    0xa8, 0x7b, 0xe0, 0x39, 0x74, 0xba, 0x7d, 0xca, 0xff, 0xe3, 0x3a, 0xd9,
    0x07, 0xaf, 0x07, 0x26, 0xd8, 0x63, 0x2b, 0x30, 0x7b, 0x4e, 0xb8, 0x8b,
    0x19, 0xa4, 0xae, 0xdf, 0xba, 0x08, 0x9a, 0x22, 0x88, 0xcf, 0x6e, 0xe2,
    0xec, 0xa0, 0x84, 0x81, 0x6f, 0xd3, 0x68, 0x19, 0x4b, 0x88, 0x8a, 0xa0,
    0xdd, 0x27, 0x08, 0x8d, 0x17, 0xe0, 0xae, 0x64, 0x90, 0x7a, 0xb3, 0x0f,
    0x30, 0xa8, 0x72, 0xce, 0x2d, 0x53, 0x9f, 0xbc, 0xa9, 0x4b, 0x38, 0xf6,
    0x98, 0xa5, 0x79, 0xcf, 0xf9, 0x89, 0xe6, 0x8a, 0x4e, 0xd0, 0x58, 0x48,
    0x93, 0x01, 0xa1, 0x63, 0xe9, 0x1f, 0x09, 0x06, 0x55, 0xce, 0x56, 0x20,
    0x07, 0x4d, 0xda, 0x61, 0x45, 0x86, 0x15, 0x6d, 0x4b, 0x91, 0x96, 0xa2,
    0x1d, 0x14, 0x32, 0x28, 0xb4, 0x4d, 0x21, 0x4d, 0xa1, 0x1d, 0x00, 0xa9,
    0x84, 0xb6, 0xf7, 0x9d, 0xff, 0x02, 0xf6, 0xcc, 0x46, 0x60, 0x2b, 0xc3,
    0xa2, 0x09, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x41, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x63, 0x60, 0x18, 0xac, 0xe0,
    0x3f, 0xb1, 0x0a, 0x99, 0x28, 0x35, 0x04, 0x9f, 0x01, 0x44, 0x19, 0x42,
    0xc8, 0x00, 0x82, 0x86, 0x10, 0x63, 0x00, 0x5e, 0x43, 0x88, 0x35, 0x00,
    0xa7, 0x21, 0xa4, 0x18, 0x40, 0xb1, 0x0b, 0x18, 0x29, 0x31, 0x00, 0xab,
    0x66, 0x62, 0x0d, 0xc0, 0xa9, 0x99, 0x18, 0x03, 0xf0, 0x6a, 0xc6, 0x07,
    0x88, 0x4e, 0xca, 0x03, 0x0f, 0x00, 0x87, 0xd3, 0x07, 0x12, 0x5c, 0x8e,
    0x60, 0x95, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};

static const unsigned char image3_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x5b, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0xd3, 0x51, 0x0e, 0xc0,
    0x20, 0x08, 0x03, 0xd0, 0xd6, 0x93, 0xb9, 0x93, 0xef, 0x68, 0xf5, 0xdb,
    0x58, 0x26, 0xcc, 0x25, 0xe3, 0x93, 0xd8, 0x17, 0x85, 0x48, 0x49, 0x1d,
    0x07, 0xd5, 0x4e, 0xc2, 0x13, 0x40, 0xf2, 0x76, 0x07, 0xa2, 0xbe, 0xbd,
    0xc1, 0x1b, 0x64, 0x79, 0x42, 0x15, 0xb1, 0x33, 0xa8, 0x20, 0xe1, 0x10,
    0xb3, 0xc8, 0xe3, 0x16, 0x32, 0xc8, 0x77, 0x6b, 0x74, 0x25, 0xe9, 0xda,
    0xf5, 0x43, 0x20, 0x13, 0x0e, 0x81, 0x6c, 0xd8, 0x02, 0x95, 0xf0, 0x02,
    0x54, 0xc3, 0x00, 0xc0, 0xdf, 0x7f, 0xe3, 0x00, 0x36, 0x43, 0x30, 0x1d,
    0xf5, 0x94, 0xbc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
    0xae, 0x42, 0x60, 0x82
};

static const unsigned char image4_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x58, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0xd3, 0x4b, 0x0a, 0x00,
    0x20, 0x08, 0x04, 0xd0, 0xa6, 0x93, 0xd5, 0xc9, 0x3b, 0xda, 0xb4, 0x0b,
    0x42, 0xc5, 0x4f, 0x8b, 0x5c, 0x4a, 0xf3, 0x30, 0x41, 0x90, 0x1c, 0xed,
    0xa1, 0xfa, 0x4b, 0xd8, 0x05, 0x00, 0x2c, 0xaf, 0x6f, 0x02, 0x91, 0xb0,
    0x09, 0x44, 0xc3, 0x2a, 0x90, 0x09, 0x0b, 0x20, 0x1b, 0xbe, 0x80, 0x4a,
    0x58, 0x4c, 0x50, 0xa9, 0x03, 0x90, 0x9c, 0xda, 0x03, 0xab, 0xaf, 0x4e,
    0x50, 0x41, 0xc4, 0x17, 0xb2, 0x88, 0xba, 0x83, 0x0c, 0x62, 0x2e, 0x31,
    0x8a, 0xe0, 0xfb, 0x35, 0x6e, 0xb7, 0xf3, 0x30, 0x1d, 0x91, 0x9f, 0x1a,
    0x3e, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
    0x82
};

static const unsigned char image5_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x32, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x63, 0xfc, 0xff, 0xff, 0xbf,
    0x03, 0x03, 0x05, 0x80, 0x89, 0x12, 0xcd, 0x83, 0xc3, 0x00, 0x16, 0x74,
    0x01, 0x46, 0x46, 0xc6, 0xfd, 0x30, 0xf6, 0xff, 0xff, 0xff, 0x1d, 0x71,
    0x89, 0x51, 0xcd, 0x05, 0xa3, 0x06, 0x0c, 0x06, 0x03, 0x18, 0x47, 0xf3,
    0x02, 0x03, 0x00, 0xde, 0x6d, 0x0e, 0x9b, 0xaf, 0x1d, 0x4c, 0x58, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image6_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x5d, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0x93, 0xc1, 0x0d, 0x80,
    0x30, 0x0c, 0x03, 0x6d, 0xc4, 0x60, 0x30, 0x39, 0xa3, 0xb9, 0x2f, 0x24,
    0x84, 0x48, 0x6d, 0x9a, 0xbc, 0x73, 0x27, 0xc7, 0x55, 0x29, 0xe9, 0x40,
    0x63, 0xb6, 0x0e, 0xfc, 0x5b, 0x40, 0xf2, 0x5a, 0x16, 0x7c, 0xc1, 0x00,
    0xb0, 0x57, 0x4b, 0x92, 0x4e, 0x07, 0x47, 0x09, 0x66, 0xb0, 0x15, 0x38,
    0x78, 0x2a, 0x48, 0x60, 0x9b, 0xa0, 0x25, 0x78, 0x96, 0xb8, 0x9c, 0x20,
    0x91, 0xd8, 0x13, 0x9c, 0x84, 0xe9, 0x5f, 0xb8, 0x4b, 0x7d, 0x0b, 0xe3,
    0x12, 0xab, 0x24, 0x71, 0x82, 0x6a, 0xda, 0xcf, 0x38, 0x00, 0x9f, 0xe9,
    0x23, 0x5b, 0xd3, 0x8f, 0x5f, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image7_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x5c, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0x93, 0x51, 0x0e, 0x80,
    0x30, 0x08, 0x43, 0x5b, 0xe3, 0xc1, 0xf4, 0xe4, 0x3b, 0x5a, 0xfd, 0xda,
    0x8f, 0x61, 0xa3, 0xca, 0x92, 0x35, 0xe1, 0xb3, 0x8f, 0x02, 0x81, 0x92,
    0x2e, 0x14, 0x74, 0x54, 0xcc, 0x21, 0x80, 0x64, 0x2b, 0x27, 0xf8, 0x02,
    0x19, 0x8e, 0xf0, 0x86, 0x90, 0x6c, 0xbd, 0x2c, 0x80, 0x9b, 0x24, 0x5d,
    0x62, 0x06, 0xb1, 0xae, 0x30, 0x83, 0xac, 0x3f, 0x63, 0x24, 0x49, 0xf7,
    0x6f, 0xc0, 0xcc, 0x9c, 0x02, 0x32, 0x33, 0x00, 0x9c, 0xae, 0x79, 0x04,
    0x0b, 0x13, 0x38, 0x9d, 0xbb, 0xb8, 0xfd, 0x1b, 0x1f, 0xb5, 0x5f, 0x20,
    0xe1, 0x0c, 0xf3, 0x07, 0x57, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image8_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xce, 0x8e, 0x57, 0x00, 0x00, 0x01,
    0xf7, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x85, 0x93, 0xcf, 0x6a, 0x13,
    0x51, 0x14, 0xc6, 0x7f, 0x93, 0x4e, 0xe1, 0x86, 0x86, 0x90, 0x6e, 0x6a,
    0x2a, 0x0a, 0xd3, 0x62, 0xa0, 0x11, 0x85, 0x66, 0xc8, 0x26, 0x05, 0x37,
    0x85, 0x76, 0x31, 0x74, 0x15, 0x1c, 0xc1, 0xee, 0x75, 0x91, 0x37, 0x90,
    0xee, 0x7d, 0x03, 0x17, 0x2e, 0x0b, 0xed, 0x5b, 0x48, 0x17, 0xb5, 0x6d,
    0x56, 0x52, 0x41, 0xc8, 0x36, 0x3b, 0x17, 0x22, 0xce, 0x50, 0xa7, 0xcc,
    0x05, 0x53, 0x8f, 0x8b, 0x7b, 0xe7, 0xb6, 0x91, 0x19, 0x3d, 0x70, 0xf9,
    0xe6, 0xcc, 0x7c, 0xf7, 0x9c, 0xef, 0xfc, 0x19, 0x00, 0xa9, 0x38, 0x4d,
    0x60, 0x81, 0x72, 0x2b, 0xe5, 0xc8, 0xdf, 0x06, 0x88, 0x52, 0x08, 0xb0,
    0xea, 0x88, 0x3e, 0x02, 0x2c, 0xd9, 0x00, 0x2b, 0xd6, 0x77, 0x9c, 0x5a,
    0x45, 0x46, 0xf2, 0x5c, 0x08, 0x82, 0xe0, 0x2b, 0xb0, 0x02, 0x2c, 0x28,
    0x14, 0x40, 0x06, 0x74, 0x80, 0x87, 0xcc, 0xe8, 0x58, 0xea, 0x53, 0x9b,
    0xc0, 0x28, 0xea, 0x6d, 0xf6, 0x64, 0xd0, 0x1f, 0x38, 0x45, 0x85, 0xb5,
    0x1f, 0xb4, 0x4d, 0x56, 0x1f, 0x51, 0xbe, 0x12, 0xab, 0xe4, 0x11, 0xa0,
    0xac, 0xa2, 0x5d, 0x60, 0xd9, 0xb3, 0x97, 0xe6, 0xd4, 0x78, 0x9e, 0x07,
    0x80, 0x52, 0x0a, 0xad, 0x75, 0xf1, 0x7a, 0x03, 0x58, 0x07, 0xea, 0xc0,
    0x37, 0xe0, 0xd2, 0x96, 0xfd, 0x18, 0x98, 0xf8, 0x05, 0x2b, 0xec, 0x85,
    0xe0, 0x03, 0x33, 0xa8, 0x08, 0xdc, 0x01, 0x3e, 0x03, 0xd7, 0xc0, 0x0d,
    0x50, 0x64, 0xf8, 0x02, 0xe4, 0xa5, 0xcd, 0x96, 0x1f, 0x06, 0x82, 0x20,
    0x70, 0xe5, 0x94, 0xe2, 0x9d, 0xa9, 0xb9, 0xd2, 0xc2, 0x5e, 0x88, 0xf2,
    0x15, 0xaa, 0xa5, 0x48, 0xd3, 0x94, 0xe4, 0x7b, 0xc2, 0xf4, 0xe5, 0x14,
    0xde, 0x56, 0x8d, 0x03, 0xea, 0x8b, 0x75, 0xf4, 0x4c, 0xdf, 0xb7, 0xa5,
    0x96, 0x28, 0x12, 0x91, 0xee, 0x93, 0xae, 0x1c, 0xbc, 0x39, 0x30, 0xce,
    0x7b, 0x03, 0x23, 0x3e, 0x89, 0x20, 0x32, 0xb2, 0x57, 0x6c, 0xe3, 0x23,
    0xa0, 0xe9, 0x7a, 0xb4, 0xbd, 0xb3, 0x8d, 0x4e, 0x35, 0x6b, 0x6b, 0xab,
    0xa4, 0x3f, 0x35, 0x79, 0x96, 0x9b, 0x0f, 0xbf, 0x80, 0xd7, 0x06, 0xdf,
    0x49, 0x68, 0x70, 0xd1, 0xf8, 0x0a, 0x85, 0x46, 0x2f, 0x15, 0xe5, 0x95,
    0x2a, 0x92, 0xbe, 0xc8, 0xe8, 0xd5, 0x48, 0x44, 0x44, 0x86, 0xf1, 0x50,
    0x44, 0x44, 0xf6, 0xe3, 0xfd, 0x39, 0xdf, 0x2a, 0x8a, 0xdd, 0xf8, 0x01,
    0x5a, 0x8d, 0x16, 0x69, 0x96, 0x82, 0x6f, 0x9e, 0x55, 0x43, 0x11, 0xed,
    0x44, 0xa4, 0x59, 0x5a, 0x64, 0x76, 0x48, 0x0e, 0x49, 0x96, 0x30, 0x3e,
    0x1b, 0xa3, 0x67, 0xfa, 0x05, 0xf0, 0x01, 0xdb, 0xf9, 0x5d, 0xe0, 0xb9,
    0x8d, 0x1e, 0x03, 0x71, 0xbb, 0xdd, 0x76, 0x99, 0xe5, 0xd4, 0xc0, 0xf9,
    0xe9, 0xb9, 0x88, 0x88, 0x1c, 0x1d, 0x1e, 0xc9, 0xa0, 0x3f, 0x98, 0x53,
    0x04, 0x50, 0xb3, 0xc1, 0x5a, 0xf6, 0x45, 0x71, 0x64, 0xb8, 0x37, 0x94,
    0x68, 0x2f, 0x72, 0x65, 0xb8, 0x60, 0x87, 0x22, 0xdd, 0x8d, 0x6e, 0xb1,
    0x02, 0x31, 0xb0, 0xec, 0x03, 0xbf, 0x81, 0xab, 0xb2, 0xf1, 0x26, 0x59,
    0xc2, 0x49, 0xeb, 0x84, 0x8b, 0x8f, 0x17, 0x28, 0x14, 0x5c, 0xc2, 0xd6,
    0xb3, 0x2d, 0x8e, 0xa7, 0xc7, 0x4c, 0x66, 0x13, 0x3c, 0xbc, 0xea, 0xdd,
    0xb8, 0x63, 0xcd, 0x7f, 0x2e, 0xe3, 0xed, 0x52, 0xba, 0x66, 0x57, 0x59,
    0x0d, 0xb8, 0x07, 0x6c, 0x62, 0xfe, 0xee, 0x2a, 0xee, 0x15, 0x30, 0xfe,
    0x9f, 0xb6, 0x1a, 0xd0, 0xb0, 0x58, 0xc5, 0xbd, 0x01, 0xae, 0xff, 0x00,
    0xdf, 0xac, 0x66, 0xdc, 0xa7, 0xcc, 0x7c, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image9_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x7f, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xc5, 0x93, 0xb1, 0x4a, 0x03,
    0x41, 0x14, 0x45, 0xef, 0x8a, 0x1f, 0x90, 0x46, 0x58, 0xbb, 0xa4, 0x10,
    0xc4, 0x6a, 0x63, 0xe7, 0x1f, 0xc8, 0x6a, 0xb1, 0x6e, 0x2a, 0x2d, 0x2d,
    0x05, 0xbf, 0x22, 0x5a, 0x05, 0x3b, 0x2d, 0x04, 0x15, 0x94, 0xa4, 0x91,
    0xa0, 0x20, 0x89, 0x82, 0x92, 0x14, 0x42, 0x22, 0x44, 0xb2, 0x36, 0x2a,
    0xa2, 0x90, 0x2d, 0x2c, 0x56, 0x2c, 0x42, 0x0a, 0x89, 0x8d, 0x70, 0x2c,
    0x66, 0xc9, 0x1a, 0xb0, 0x10, 0x14, 0x1c, 0x18, 0xce, 0x9b, 0x62, 0xde,
    0xbb, 0xf7, 0xcd, 0x1b, 0x0b, 0xd0, 0x6f, 0xd6, 0xc8, 0xaf, 0x6e, 0xff,
    0x45, 0x82, 0x51, 0x49, 0x9a, 0xcb, 0x8e, 0x0f, 0xf9, 0xa8, 0xde, 0x44,
    0xd6, 0x8f, 0x33, 0xe0, 0xd8, 0x50, 0x5a, 0x06, 0x80, 0x66, 0x1e, 0x00,
    0xd7, 0xb1, 0xc1, 0xb1, 0xbf, 0x27, 0xe8, 0xeb, 0xb6, 0x5c, 0xc7, 0xa6,
    0x7a, 0x13, 0x49, 0x57, 0x6b, 0xd2, 0x8c, 0xa4, 0xe3, 0x50, 0x5a, 0x90,
    0x74, 0xac, 0x6f, 0x69, 0x59, 0x7b, 0x02, 0xac, 0x61, 0x05, 0xad, 0x42,
    0x52, 0xd9, 0x03, 0xdf, 0x73, 0xc1, 0x83, 0xa5, 0x45, 0x7f, 0xe8, 0xec,
    0x7b, 0xe6, 0x2c, 0x29, 0xd9, 0x46, 0x56, 0x9e, 0xc6, 0xba, 0x8b, 0x3f,
    0xef, 0xd2, 0xef, 0xf7, 0x01, 0xe8, 0x76, 0xbb, 0x00, 0x74, 0x3a, 0x1d,
    0x00, 0xda, 0xad, 0x36, 0x00, 0xb5, 0x7a, 0x0d, 0x80, 0xca, 0x49, 0x85,
    0xac, 0x93, 0xc5, 0x28, 0xb8, 0xcc, 0x83, 0x63, 0xc3, 0xa3, 0x69, 0x05,
    0xaf, 0x31, 0x3b, 0x31, 0x9b, 0x06, 0xe5, 0xa3, 0x32, 0x00, 0x9b, 0x5b,
    0x9b, 0x30, 0x0b, 0x80, 0x46, 0xe6, 0x24, 0xe9, 0xa2, 0xae, 0x5c, 0x7a,
    0x5a, 0x9a, 0x90, 0xc2, 0xa7, 0x50, 0x1a, 0x93, 0xc2, 0x30, 0x94, 0x32,
    0x52, 0x70, 0x1d, 0x48, 0x33, 0x52, 0xf5, 0xac, 0xaa, 0xdc, 0x42, 0x4e,
    0xa5, 0x83, 0x5d, 0xdd, 0xdf, 0x06, 0xca, 0x3c, 0x64, 0x92, 0x1e, 0xc4,
    0xdd, 0x85, 0x96, 0xc1, 0xdd, 0xfd, 0x9d, 0x09, 0x02, 0x83, 0xda, 0xb9,
    0x91, 0x5d, 0xdc, 0x2f, 0x9a, 0x5e, 0xcd, 0xba, 0x83, 0xd7, 0x90, 0xeb,
    0xd8, 0xf8, 0x9e, 0x4f, 0x3b, 0x30, 0x1e, 0x1b, 0xcd, 0x86, 0xe1, 0xa5,
    0x61, 0xe5, 0xb4, 0x62, 0x2e, 0x97, 0x8a, 0xb0, 0x0b, 0x2b, 0xab, 0x2b,
    0xa4, 0x52, 0xa9, 0x24, 0x01, 0x8e, 0x0d, 0xf5, 0xd8, 0xe3, 0x61, 0x79,
    0xc8, 0x6b, 0xb1, 0x64, 0x2a, 0xee, 0x6c, 0xef, 0x00, 0x50, 0xd8, 0x28,
    0x0c, 0xbc, 0x0f, 0xe6, 0x20, 0x9d, 0x4e, 0x33, 0x35, 0x39, 0xf5, 0x65,
    0x2e, 0xe3, 0xf5, 0x61, 0xf0, 0xfe, 0xf1, 0x3e, 0x88, 0x7b, 0x6f, 0x3d,
    0x45, 0x2f, 0x91, 0xa2, 0xe7, 0x64, 0x52, 0xad, 0x7f, 0xff, 0x8d, 0x9f,
    0xc7, 0x8a, 0x8f, 0x27, 0x39, 0x24, 0x21, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image10_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x41, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x63, 0x60, 0x18, 0x4a, 0xe0,
    0x3f, 0x36, 0x41, 0x26, 0x4a, 0x34, 0x13, 0x6b, 0x00, 0x4e, 0xcd, 0xc4,
    0x18, 0x80, 0x57, 0x33, 0x21, 0x03, 0x08, 0x6a, 0xc6, 0x67, 0x00, 0x51,
    0x9a, 0x09, 0xb9, 0x80, 0x22, 0x03, 0x18, 0xa9, 0xe1, 0x02, 0xa2, 0x0c,
    0x21, 0xe4, 0x05, 0x82, 0x86, 0x10, 0x13, 0x06, 0x44, 0x7b, 0x87, 0x10,
    0x20, 0x3a, 0x66, 0xe8, 0x0b, 0x00, 0x74, 0x07, 0x07, 0x12, 0x90, 0x40,
    0xa0, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};

static const unsigned char image11_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x56, 0xce, 0x8e, 0x57, 0x00, 0x00, 0x00,
    0xe7, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xcd, 0x92, 0xb1, 0x0a, 0xc2,
    0x40, 0x0c, 0x86, 0xbf, 0xb4, 0x6e, 0x4a, 0x41, 0x10, 0x41, 0xd1, 0x4d,
    0x10, 0x9c, 0x44, 0x9f, 0xc2, 0x5d, 0x7d, 0x6b, 0x17, 0x27, 0x9f, 0x40,
    0x70, 0x71, 0x10, 0xba, 0x08, 0xf5, 0x1c, 0x9a, 0x42, 0x1a, 0x6b, 0xf5,
    0x9c, 0xfc, 0xe1, 0xe8, 0x7f, 0x5c, 0xf2, 0x5d, 0x9a, 0x0b, 0x18, 0x85,
    0x10, 0x02, 0xd0, 0x55, 0x1b, 0x80, 0x0c, 0x48, 0x89, 0x91, 0x26, 0x56,
    0x80, 0x99, 0xf1, 0xa3, 0xaf, 0x61, 0x15, 0x04, 0xd8, 0x18, 0xc0, 0x2a,
    0x0a, 0xe6, 0x20, 0x1b, 0x60, 0xfe, 0x13, 0xcc, 0x80, 0xb6, 0xea, 0xfb,
    0xc0, 0x24, 0x16, 0x96, 0x88, 0x08, 0x65, 0x0c, 0xa2, 0xfe, 0xaa, 0x67,
    0x53, 0xdd, 0x1f, 0x80, 0xb5, 0xfa, 0x33, 0x30, 0x7c, 0x07, 0xcb, 0xcc,
    0x8d, 0x0b, 0xe3, 0x27, 0xb1, 0x95, 0x25, 0x7a, 0xd0, 0x94, 0xf0, 0xe7,
    0x30, 0xf5, 0xfe, 0x65, 0xe3, 0x60, 0x6e, 0x4c, 0x06, 0x6e, 0x9f, 0x25,
    0x0e, 0xf4, 0x00, 0x2e, 0xc0, 0xd8, 0xbf, 0x98, 0x88, 0x00, 0xec, 0x35,
    0xe6, 0x6e, 0x72, 0xba, 0x40, 0xda, 0xf1, 0x25, 0x39, 0xd8, 0x39, 0x84,
    0x70, 0x10, 0x91, 0x35, 0x30, 0x06, 0x0a, 0xe0, 0x08, 0xe4, 0x26, 0x5e,
    0x1a, 0x18, 0xad, 0xbf, 0x39, 0xa7, 0x1c, 0xd6, 0x14, 0x6a, 0x83, 0xbc,
    0x03, 0xfa, 0x4d, 0x15, 0xbd, 0xab, 0xec, 0xf4, 0xe9, 0xd6, 0x36, 0xd5,
    0x7a, 0xe6, 0x97, 0x55, 0x5b, 0x45, 0x2f, 0x30, 0x60, 0x49, 0xd9, 0x5c,
    0x4b, 0xb9, 0x01, 0xc5, 0xc7, 0x46, 0x19, 0x25, 0x40, 0x4f, 0xbf, 0x36,
    0xaf, 0x00, 0xf2, 0x27, 0x54, 0x9d, 0xec, 0x8f, 0x6a, 0x53, 0xa4, 0x5f,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const char* const image12_data[] = { 
"18 18 7 1",
". c #000000",
"# c #00f600",
"a c #00fa00",
"e c #a43408",
"d c #ff5010",
"b c #ff916a",
"c c #ffffff",
"..................",
".....########.....",
"...#a#a#a#a#a#a...",
"..###b#########c..",
"..a#bdd#a#a#a#c#..",
".####e#######c###.",
".#a#a#a#a#a#c#a#a.",
".#######..#c#####.",
".#a#a#a....#a#a#a.",
".######....######.",
".#a#a#a#..aca#a#a.",
".######c####c####.",
".#a#a#c#a#a#aca#a.",
"..###c########c#..",
"..a#c#a#a#a#a#ac..",
"...c###########...",
".....#a#a#a#a.....",
".................."};

static const unsigned char image13_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x5e, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xad, 0x53, 0x3d, 0x4b, 0xc3,
    0x50, 0x14, 0x3d, 0x0f, 0xfc, 0x11, 0x71, 0xcb, 0x58, 0x33, 0xbd, 0x16,
    0x5c, 0x8a, 0xbf, 0xe0, 0xe1, 0x10, 0xb2, 0x69, 0xb7, 0xac, 0xfe, 0x0c,
    0x75, 0xf0, 0x3f, 0x48, 0x41, 0xe8, 0xdb, 0x42, 0x07, 0x89, 0x3a, 0xd5,
    0xc1, 0x9a, 0x2c, 0x92, 0xb8, 0x55, 0xe8, 0x10, 0xa1, 0x43, 0x23, 0x4e,
    0x45, 0x0a, 0x85, 0x52, 0x38, 0x0e, 0x35, 0x6d, 0xda, 0xbe, 0x8a, 0x05,
    0x2f, 0x3c, 0x0e, 0xef, 0x71, 0xef, 0xb9, 0xe7, 0xdd, 0x0f, 0x70, 0x90,
    0x41, 0x49, 0x8b, 0x91, 0xb4, 0xa8, 0xa4, 0x45, 0x00, 0x1b, 0x87, 0xda,
    0x07, 0x07, 0x19, 0x4c, 0x28, 0x94, 0xb4, 0x78, 0xf7, 0x9a, 0x03, 0xdd,
    0x0b, 0xa0, 0xf2, 0x0e, 0x3c, 0x03, 0x38, 0xc2, 0x0a, 0x0a, 0xaf, 0x89,
    0xa1, 0xf6, 0xc5, 0x3e, 0x80, 0x1c, 0x40, 0x19, 0x11, 0x49, 0x8b, 0x7c,
    0x3a, 0x67, 0x24, 0x2d, 0x7a, 0xae, 0x62, 0xe2, 0x46, 0x3c, 0x3d, 0xf1,
    0x98, 0xb8, 0x11, 0x3d, 0xd7, 0x63, 0xe2, 0x26, 0xf4, 0x5c, 0xb5, 0x54,
    0xb3, 0xa6, 0x00, 0x4a, 0x5a, 0xe4, 0xa5, 0xa2, 0x77, 0xac, 0x58, 0xb6,
    0x2c, 0xcb, 0x48, 0x92, 0x51, 0x1c, 0x91, 0x53, 0x32, 0xbc, 0x0d, 0x59,
    0x95, 0x55, 0x0e, 0xb5, 0x0f, 0x6a, 0x1f, 0x05, 0xa2, 0xc8, 0x4c, 0x92,
    0xec, 0xff, 0x44, 0xf7, 0xe6, 0x10, 0xde, 0x87, 0xe4, 0x90, 0x6c, 0xdd,
    0x5c, 0xd3, 0xb6, 0x6d, 0x63, 0x2d, 0x16, 0x35, 0x48, 0x5f, 0x52, 0xd4,
    0x0e, 0x6b, 0xe8, 0xbd, 0xf5, 0xe0, 0x1c, 0x38, 0x88, 0xbb, 0x31, 0xea,
    0x95, 0x3a, 0xf4, 0x83, 0x46, 0x63, 0xdc, 0x80, 0x38, 0x13, 0xa0, 0xf6,
    0x85, 0xb1, 0x06, 0x49, 0x9a, 0x90, 0x53, 0x92, 0xf1, 0x3c, 0x73, 0xe7,
    0xb1, 0x43, 0x7e, 0x91, 0x2d, 0xdd, 0x22, 0xfb, 0x34, 0xfe, 0x7d, 0xa1,
    0xc0, 0xb6, 0x6d, 0x3a, 0x15, 0x07, 0xd8, 0xc3, 0xd2, 0x66, 0xc0, 0x64,
    0x36, 0x01, 0x66, 0xc0, 0x68, 0x3c, 0x42, 0xfe, 0x91, 0x23, 0xbd, 0x52,
    0xe6, 0x2e, 0x6c, 0x63, 0xfe, 0x2b, 0x8a, 0xa1, 0xf6, 0x57, 0x18, 0x45,
    0xa3, 0x49, 0xfc, 0x62, 0xc5, 0x3c, 0x2c, 0xfc, 0xca, 0x8c, 0x00, 0xc8,
    0x4f, 0x32, 0x68, 0x07, 0x46, 0x34, 0x4d, 0x29, 0xca, 0x7d, 0x05, 0xb0,
    0x35, 0x38, 0x68, 0x07, 0x66, 0x82, 0x7f, 0x51, 0x50, 0x7e, 0xd8, 0x59,
    0xc1, 0xfa, 0xb6, 0x6d, 0x71, 0xda, 0xd8, 0x85, 0xe2, 0xbe, 0xd1, 0x85,
    0x5d, 0xf1, 0x1b, 0xf8, 0x37, 0xde, 0x7c, 0xcd, 0xfc, 0xbc, 0x90, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image14_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0xcb, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xd5, 0x92, 0xb1, 0x6b, 0x1a,
    0x71, 0x1c, 0xc5, 0x3f, 0x16, 0x87, 0xeb, 0x52, 0x1a, 0x48, 0xe0, 0x06,
    0x87, 0x73, 0x0d, 0x1d, 0x54, 0xa4, 0x10, 0xb7, 0x38, 0x95, 0x83, 0x42,
    0x51, 0xba, 0xf4, 0x6f, 0x28, 0x85, 0x50, 0xfb, 0x17, 0x94, 0x4c, 0x0e,
    0x5d, 0xba, 0x46, 0x28, 0xa4, 0x4b, 0x50, 0x0b, 0xc5, 0xd8, 0xa1, 0x8d,
    0x42, 0x8b, 0x27, 0x84, 0xa8, 0xa1, 0xa8, 0x04, 0x0a, 0x5e, 0x30, 0xa2,
    0x42, 0xe1, 0x02, 0x19, 0xce, 0x1b, 0x84, 0xd7, 0x41, 0x22, 0x49, 0xda,
    0x42, 0x3a, 0xf6, 0x2d, 0x8f, 0x2f, 0xfc, 0xde, 0xfb, 0xbe, 0xef, 0x8f,
    0x07, 0xff, 0x3d, 0x42, 0x00, 0x99, 0xa4, 0xa9, 0x60, 0x0e, 0x46, 0xd8,
    0x20, 0x98, 0x07, 0x54, 0x8f, 0xa7, 0xa1, 0x5b, 0x1b, 0xe4, 0x93, 0x96,
    0x72, 0x5b, 0x36, 0x3c, 0xce, 0x41, 0xf7, 0x3d, 0x10, 0x25, 0xfb, 0x22,
    0xc7, 0x06, 0x06, 0x4d, 0x82, 0xdf, 0xb8, 0x7c, 0x74, 0xdd, 0x3c, 0x64,
    0xc7, 0x4c, 0xed, 0x7f, 0x3d, 0x80, 0x6e, 0x19, 0x22, 0xc0, 0x91, 0xbb,
    0xe0, 0x11, 0x7f, 0xe4, 0xd0, 0xc3, 0xc2, 0x32, 0x39, 0x40, 0x78, 0x33,
    0x6c, 0xc0, 0x49, 0x15, 0x22, 0x69, 0xb2, 0x99, 0x2c, 0xe9, 0xc8, 0x4b,
    0x6a, 0xd4, 0x49, 0x47, 0x37, 0x71, 0xa6, 0x1d, 0x52, 0x66, 0x9c, 0x9a,
    0xdb, 0x24, 0x1d, 0xdd, 0xc0, 0x19, 0x35, 0x79, 0xbb, 0x95, 0xe7, 0xf9,
    0x9b, 0x57, 0x5a, 0x46, 0xb0, 0x63, 0xa6, 0x34, 0x7c, 0xad, 0xc6, 0xb6,
    0xad, 0xcc, 0x93, 0x8c, 0x7c, 0xdf, 0x97, 0x24, 0x79, 0x9e, 0x27, 0x49,
    0x1a, 0x0c, 0x06, 0xd2, 0x85, 0xd4, 0x3a, 0x6c, 0x49, 0x43, 0xe9, 0xa0,
    0x76, 0x20, 0xff, 0xbb, 0xaf, 0xca, 0xc7, 0x8a, 0xe2, 0xb1, 0xb8, 0x16,
    0x09, 0x4e, 0xc1, 0xf9, 0xd0, 0xa6, 0xb4, 0x37, 0x81, 0xbb, 0xc0, 0x4f,
    0x58, 0x59, 0x5b, 0x81, 0x33, 0x88, 0xae, 0x46, 0xd9, 0xbf, 0x17, 0x22,
    0x05, 0x94, 0xca, 0x45, 0x12, 0xf7, 0x13, 0x14, 0xbe, 0x15, 0x38, 0xff,
    0x74, 0x4e, 0xe7, 0xb8, 0x13, 0xba, 0x53, 0x9f, 0x07, 0xcc, 0x3e, 0x37,
    0x69, 0x46, 0x12, 0x10, 0x01, 0xf7, 0x87, 0x0b, 0x6b, 0xe0, 0xba, 0x2e,
    0xac, 0x42, 0xfb, 0xa4, 0x4d, 0x0a, 0x70, 0x80, 0x94, 0x99, 0xc2, 0x39,
    0x73, 0xe8, 0x77, 0xfb, 0xec, 0x74, 0x77, 0x16, 0x27, 0xe4, 0x93, 0x96,
    0xec, 0x98, 0x29, 0x79, 0x92, 0x0e, 0x25, 0xf9, 0x52, 0xaf, 0xdf, 0x93,
    0x2e, 0x24, 0xb5, 0x25, 0x0d, 0xa5, 0x0a, 0xc8, 0x07, 0xed, 0xbe, 0xdb,
    0x55, 0xaf, 0xda, 0x93, 0xfd, 0xc8, 0xbe, 0xfe, 0x07, 0xcf, 0x9e, 0x66,
    0xd4, 0x6a, 0xb7, 0xa4, 0x81, 0xd4, 0x70, 0x1a, 0xd2, 0x78, 0x21, 0xf2,
    0xe0, 0xaf, 0xbc, 0x34, 0xc8, 0x27, 0x2d, 0xa9, 0x26, 0x8d, 0x9d, 0xb1,
    0x8a, 0x7b, 0x45, 0x79, 0x6d, 0x4f, 0x95, 0x72, 0x71, 0xf9, 0xd8, 0xbf,
    0x21, 0xbe, 0x9c, 0x97, 0x3d, 0xb0, 0x2c, 0x4b, 0xeb, 0x0f, 0xd6, 0x61,
    0x0e, 0x46, 0x18, 0x02, 0xc0, 0x60, 0xd1, 0x48, 0x80, 0xd9, 0x7c, 0x46,
    0xe9, 0x4b, 0x1d, 0x07, 0xd8, 0x4e, 0xc6, 0x99, 0x4c, 0x27, 0x9c, 0x8e,
    0x6e, 0xdf, 0x54, 0x00, 0x2e, 0x37, 0xff, 0x93, 0xe8, 0x2a, 0xbc, 0x1b,
    0xb1, 0xaf, 0xe2, 0x17, 0x6f, 0x88, 0x18, 0xb0, 0x9e, 0x5b, 0xfd, 0x0d,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image15_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x5f, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xcd, 0x93, 0xb1, 0x0e, 0xc0,
    0x40, 0x08, 0x42, 0xa5, 0xff, 0xff, 0xcf, 0xaf, 0x53, 0x87, 0x5a, 0xd1,
    0x5c, 0x6e, 0xe8, 0xb1, 0x19, 0x23, 0x02, 0x46, 0x01, 0xb1, 0x83, 0x6b,
    0x6b, 0xfa, 0x4c, 0x02, 0x49, 0x4b, 0xa1, 0xa8, 0x0a, 0x51, 0x12, 0x80,
    0x3a, 0xf2, 0xa7, 0x6f, 0x2d, 0x64, 0x25, 0xae, 0x56, 0x44, 0xb4, 0x92,
    0x01, 0x75, 0xb6, 0x46, 0x82, 0x09, 0xe3, 0x15, 0xaa, 0x2c, 0x5e, 0x0a,
    0x5c, 0x88, 0x79, 0xb8, 0xb2, 0x01, 0xc8, 0x2a, 0xc8, 0x9b, 0x5d, 0xfd,
    0x51, 0xe0, 0x4e, 0xe8, 0x50, 0x5a, 0x58, 0xc1, 0xff, 0xbf, 0x70, 0x03,
    0xfb, 0xad, 0x39, 0x09, 0x0e, 0x4c, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image16_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0x5d, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xd5, 0x93, 0xc1, 0x0a, 0xc0,
    0x30, 0x08, 0x43, 0x4d, 0xd9, 0xff, 0xff, 0xf2, 0xdb, 0x69, 0xb0, 0xcd,
    0xb4, 0xb6, 0xf4, 0x30, 0x96, 0x9b, 0x86, 0x04, 0x8d, 0x28, 0x20, 0x76,
    0xd0, 0xb6, 0xd4, 0xff, 0x33, 0x90, 0x94, 0x02, 0x3b, 0x1c, 0x09, 0xc8,
    0x89, 0x5d, 0xbf, 0x39, 0xe7, 0xaa, 0x7e, 0x70, 0x11, 0xd1, 0x25, 0x01,
    0x8d, 0xc4, 0xa5, 0xc1, 0x0c, 0x86, 0x21, 0xba, 0x9d, 0xd3, 0x04, 0x80,
    0xdd, 0xf1, 0x2e, 0xbe, 0xf8, 0x6e, 0x88, 0x6f, 0xa2, 0xaa, 0xd3, 0x04,
    0xb3, 0x70, 0xa7, 0x5c, 0x32, 0x70, 0xf8, 0xfe, 0x17, 0x4e, 0xc0, 0xc0,
    0x36, 0x0f, 0xfe, 0x2f, 0x6c, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};


/*
 *  Constructs a TribotsviewMainWidget as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 *
 */
TribotsviewMainWidget::TribotsviewMainWidget( QWidget* parent, const char* name, WFlags fl )
    : QMainWindow( parent, name, fl ),
      image12( (const char **) image12_data )
{
    (void)statusBar();
    QImage img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    img.loadFromData( image3_data, sizeof( image3_data ), "PNG" );
    image3 = img;
    img.loadFromData( image4_data, sizeof( image4_data ), "PNG" );
    image4 = img;
    img.loadFromData( image5_data, sizeof( image5_data ), "PNG" );
    image5 = img;
    img.loadFromData( image6_data, sizeof( image6_data ), "PNG" );
    image6 = img;
    img.loadFromData( image7_data, sizeof( image7_data ), "PNG" );
    image7 = img;
    img.loadFromData( image8_data, sizeof( image8_data ), "PNG" );
    image8 = img;
    img.loadFromData( image9_data, sizeof( image9_data ), "PNG" );
    image9 = img;
    img.loadFromData( image10_data, sizeof( image10_data ), "PNG" );
    image10 = img;
    img.loadFromData( image11_data, sizeof( image11_data ), "PNG" );
    image11 = img;
    img.loadFromData( image13_data, sizeof( image13_data ), "PNG" );
    image13 = img;
    img.loadFromData( image14_data, sizeof( image14_data ), "PNG" );
    image14 = img;
    img.loadFromData( image15_data, sizeof( image15_data ), "PNG" );
    image15 = img;
    img.loadFromData( image16_data, sizeof( image16_data ), "PNG" );
    image16 = img;
    if ( !name )
	setName( "TribotsviewMainWidget" );
    setEnabled( TRUE );
    setMinimumSize( QSize( 454, 442 ) );
    setCentralWidget( new QWidget( this, "qt_central_widget" ) );
    TribotsviewMainWidgetLayout = new QGridLayout( centralWidget(), 1, 1, 3, 1, "TribotsviewMainWidgetLayout"); 

    splitter4 = new QSplitter( centralWidget(), "splitter4" );
    splitter4->setOrientation( QSplitter::Horizontal );

    groupBox1 = new QGroupBox( splitter4, "groupBox1" );
    groupBox1->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)5, 1, 0, groupBox1->sizePolicy().hasHeightForWidth() ) );
    groupBox1->setColumnLayout(0, Qt::Vertical );
    groupBox1->layout()->setSpacing( 1 );
    groupBox1->layout()->setMargin( 3 );
    groupBox1Layout = new QGridLayout( groupBox1->layout() );
    groupBox1Layout->setAlignment( Qt::AlignTop );

    layout4 = new QGridLayout( 0, 1, 1, 0, 6, "layout4"); 

    goto_begin_button = new QPushButton( groupBox1, "goto_begin_button" );

    layout4->addWidget( goto_begin_button, 0, 0 );

    goto_end_button = new QPushButton( groupBox1, "goto_end_button" );

    layout4->addWidget( goto_end_button, 0, 2 );

    cycle_slider = new QSlider( groupBox1, "cycle_slider" );
    cycle_slider->setMinValue( 1 );
    cycle_slider->setMaxValue( 20 );
    cycle_slider->setValue( 1 );
    cycle_slider->setOrientation( QSlider::Horizontal );

    layout4->addWidget( cycle_slider, 0, 1 );

    groupBox1Layout->addLayout( layout4, 1, 0 );

    splitter2 = new QSplitter( groupBox1, "splitter2" );
    splitter2->setOrientation( QSplitter::Vertical );

    field_of_play = new TribotsTools::FieldOfPlay( splitter2, "field_of_play" );
    field_of_play->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, field_of_play->sizePolicy().hasHeightForWidth() ) );
    field_of_play->setMinimumSize( QSize( 300, 200 ) );
    field_of_play->setPaletteBackgroundColor( QColor( 0, 170, 0 ) );
    field_of_play->setFocusPolicy( TribotsTools::FieldOfPlay::StrongFocus );

    textfeld = new QTextEdit( splitter2, "textfeld" );
    textfeld->setEnabled( TRUE );
    textfeld->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)2, 0, 0, textfeld->sizePolicy().hasHeightForWidth() ) );
    textfeld->setMinimumSize( QSize( 0, 25 ) );
    textfeld->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    QPalette pal;
    QColorGroup cg;
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    textfeld->setPalette( pal );
    QFont textfeld_font(  textfeld->font() );
    textfeld->setFont( textfeld_font ); 
    textfeld->setFocusPolicy( QTextEdit::NoFocus );
    textfeld->setReadOnly( TRUE );

    QWidget* privateLayoutWidget = new QWidget( splitter2, "layout2" );
    layout2 = new QHBoxLayout( privateLayoutWidget, 0, 6, "layout2"); 

    textEditIncoming = new QTextEdit( privateLayoutWidget, "textEditIncoming" );
    textEditIncoming->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)2, 0, 0, textEditIncoming->sizePolicy().hasHeightForWidth() ) );
    textEditIncoming->setMinimumSize( QSize( 0, 25 ) );
    textEditIncoming->setFocusPolicy( QTextEdit::NoFocus );
    textEditIncoming->setReadOnly( TRUE );
    layout2->addWidget( textEditIncoming );

    textEditOutgoing = new QTextEdit( privateLayoutWidget, "textEditOutgoing" );
    textEditOutgoing->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)2, 0, 0, textEditOutgoing->sizePolicy().hasHeightForWidth() ) );
    textEditOutgoing->setMinimumSize( QSize( 0, 25 ) );
    textEditOutgoing->setFocusPolicy( QTextEdit::NoFocus );
    textEditOutgoing->setReadOnly( TRUE );
    layout2->addWidget( textEditOutgoing );

    groupBox1Layout->addWidget( splitter2, 0, 0 );

    groupBox11 = new QGroupBox( splitter4, "groupBox11" );
    groupBox11->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)5, 0, 0, groupBox11->sizePolicy().hasHeightForWidth() ) );
    groupBox11->setMinimumSize( QSize( 0, 0 ) );
    groupBox11->setMaximumSize( QSize( 32767, 32767 ) );
    groupBox11->setColumnLayout(0, Qt::Vertical );
    groupBox11->layout()->setSpacing( 1 );
    groupBox11->layout()->setMargin( 3 );
    groupBox11Layout = new QGridLayout( groupBox11->layout() );
    groupBox11Layout->setAlignment( Qt::AlignTop );

    textLabel2 = new QLabel( groupBox11, "textLabel2" );
    QFont textLabel2_font(  textLabel2->font() );
    textLabel2->setFont( textLabel2_font ); 

    groupBox11Layout->addWidget( textLabel2, 0, 1 );

    cycle_num = new QLineEdit( groupBox11, "cycle_num" );
    cycle_num->setEnabled( TRUE );
    cycle_num->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, cycle_num->sizePolicy().hasHeightForWidth() ) );
    cycle_num->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    cycle_num->setPalette( pal );
    QFont cycle_num_font(  cycle_num->font() );
    cycle_num->setFont( cycle_num_font ); 

    groupBox11Layout->addWidget( cycle_num, 1, 0 );

    prog_time = new QLineEdit( groupBox11, "prog_time" );
    prog_time->setEnabled( TRUE );
    prog_time->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, prog_time->sizePolicy().hasHeightForWidth() ) );
    prog_time->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    prog_time->setPalette( pal );
    QFont prog_time_font(  prog_time->font() );
    prog_time->setFont( prog_time_font ); 

    groupBox11Layout->addWidget( prog_time, 1, 1 );

    textLabel1 = new QLabel( groupBox11, "textLabel1" );
    QFont textLabel1_font(  textLabel1->font() );
    textLabel1->setFont( textLabel1_font ); 

    groupBox11Layout->addWidget( textLabel1, 0, 0 );

    textLabel1_7 = new QLabel( groupBox11, "textLabel1_7" );

    groupBox11Layout->addWidget( textLabel1_7, 7, 0 );

    refereeState = new QLineEdit( groupBox11, "refereeState" );
    refereeState->setEnabled( TRUE );
    refereeState->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, refereeState->sizePolicy().hasHeightForWidth() ) );
    refereeState->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    refereeState->setPalette( pal );
    QFont refereeState_font(  refereeState->font() );
    refereeState->setFont( refereeState_font ); 
    refereeState->setFocusPolicy( QLineEdit::NoFocus );
    refereeState->setAlignment( int( QLineEdit::AlignAuto ) );
    refereeState->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( refereeState, 2, 2, 0, 1 );

    ball_known = new QLineEdit( groupBox11, "ball_known" );
    ball_known->setEnabled( TRUE );
    ball_known->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, ball_known->sizePolicy().hasHeightForWidth() ) );
    ball_known->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    ball_known->setPalette( pal );
    QFont ball_known_font(  ball_known->font() );
    ball_known->setFont( ball_known_font ); 
    ball_known->setFocusPolicy( QLineEdit::NoFocus );
    ball_known->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( ball_known, 4, 4, 0, 1 );

    textLabel3 = new QLabel( groupBox11, "textLabel3" );
    QFont textLabel3_font(  textLabel3->font() );
    textLabel3->setFont( textLabel3_font ); 

    groupBox11Layout->addMultiCellWidget( textLabel3, 3, 3, 0, 1 );

    textLabel2_2 = new QLabel( groupBox11, "textLabel2_2" );
    QFont textLabel2_2_font(  textLabel2_2->font() );
    textLabel2_2->setFont( textLabel2_2_font ); 

    groupBox11Layout->addMultiCellWidget( textLabel2_2, 5, 5, 0, 1 );

    robot_velocity = new QLineEdit( groupBox11, "robot_velocity" );
    robot_velocity->setEnabled( TRUE );
    robot_velocity->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, robot_velocity->sizePolicy().hasHeightForWidth() ) );
    robot_velocity->setPaletteForegroundColor( QColor( 0, 0, 0 ) );
    robot_velocity->setPaletteBackgroundColor( QColor( 255, 255, 255 ) );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, QColor( 246, 244, 238) );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, black );
    cg.setColor( QColorGroup::LinkVisited, black );
    pal.setActive( cg );
    cg.setColor( QColorGroup::Foreground, black );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, black );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setInactive( cg );
    cg.setColor( QColorGroup::Foreground, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Button, QColor( 238, 234, 222) );
    cg.setColor( QColorGroup::Light, white );
    cg.setColor( QColorGroup::Midlight, white );
    cg.setColor( QColorGroup::Dark, QColor( 119, 117, 111) );
    cg.setColor( QColorGroup::Mid, QColor( 158, 155, 147) );
    cg.setColor( QColorGroup::Text, black );
    cg.setColor( QColorGroup::BrightText, white );
    cg.setColor( QColorGroup::ButtonText, QColor( 128, 128, 128) );
    cg.setColor( QColorGroup::Base, white );
    cg.setColor( QColorGroup::Background, white );
    cg.setColor( QColorGroup::Shadow, black );
    cg.setColor( QColorGroup::Highlight, QColor( 0, 0, 128) );
    cg.setColor( QColorGroup::HighlightedText, white );
    cg.setColor( QColorGroup::Link, QColor( 0, 0, 192) );
    cg.setColor( QColorGroup::LinkVisited, QColor( 128, 0, 128) );
    pal.setDisabled( cg );
    robot_velocity->setPalette( pal );
    QFont robot_velocity_font(  robot_velocity->font() );
    robot_velocity->setFont( robot_velocity_font ); 
    robot_velocity->setFocusPolicy( QLineEdit::NoFocus );
    robot_velocity->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( robot_velocity, 6, 6, 0, 1 );

    textEditBehavior = new QTextEdit( groupBox11, "textEditBehavior" );
    textEditBehavior->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)2, 0, 0, textEditBehavior->sizePolicy().hasHeightForWidth() ) );
    textEditBehavior->setMinimumSize( QSize( 0, 25 ) );
    textEditBehavior->setFocusPolicy( QTextEdit::NoFocus );
    textEditBehavior->setHScrollBarMode( QTextEdit::AlwaysOff );
    textEditBehavior->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( textEditBehavior, 9, 9, 0, 1 );

    rotate_view = new TribotsTools::RotateView( groupBox11, "rotate_view" );
    rotate_view->setMinimumSize( QSize( 80, 80 ) );
    rotate_view->setMaximumSize( QSize( 30000, 30000 ) );
    rotate_view->setPaletteBackgroundColor( QColor( 238, 238, 230 ) );

    groupBox11Layout->addMultiCellWidget( rotate_view, 10, 10, 0, 1 );

    display_rate = new QSlider( groupBox11, "display_rate" );
    display_rate->setMinValue( 1 );
    display_rate->setMaxValue( 9 );
    display_rate->setPageStep( 1 );
    display_rate->setValue( 5 );
    display_rate->setOrientation( QSlider::Horizontal );

    groupBox11Layout->addMultiCellWidget( display_rate, 12, 12, 0, 1 );

    lineEditImageSource = new QLineEdit( groupBox11, "lineEditImageSource" );
    lineEditImageSource->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, lineEditImageSource->sizePolicy().hasHeightForWidth() ) );
    QFont lineEditImageSource_font(  lineEditImageSource->font() );
    lineEditImageSource->setFont( lineEditImageSource_font ); 
    lineEditImageSource->setFocusPolicy( QLineEdit::NoFocus );
    lineEditImageSource->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( lineEditImageSource, 11, 11, 0, 1 );

    lineEditPlayertype = new QLineEdit( groupBox11, "lineEditPlayertype" );
    lineEditPlayertype->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)2, (QSizePolicy::SizeType)0, 0, 0, lineEditPlayertype->sizePolicy().hasHeightForWidth() ) );
    lineEditPlayertype->setFocusPolicy( QLineEdit::NoFocus );
    lineEditPlayertype->setReadOnly( TRUE );

    groupBox11Layout->addMultiCellWidget( lineEditPlayertype, 8, 8, 0, 1 );

    TribotsviewMainWidgetLayout->addWidget( splitter4, 0, 0 );

    // actions
    fileExitAction = new QAction( this, "fileExitAction" );
    fileExitAction->setIconSet( QIconSet( image1 ) );
    PlayFwd = new QAction( this, "PlayFwd" );
    PlayFwd->setIconSet( QIconSet( image2 ) );
    PlayFastFwd = new QAction( this, "PlayFastFwd" );
    PlayFastFwd->setIconSet( QIconSet( image3 ) );
    PlayFastRew = new QAction( this, "PlayFastRew" );
    PlayFastRew->setIconSet( QIconSet( image4 ) );
    StopPlay = new QAction( this, "StopPlay" );
    StopPlay->setIconSet( QIconSet( image5 ) );
    PlayStepRew = new QAction( this, "PlayStepRew" );
    PlayStepRew->setIconSet( QIconSet( image6 ) );
    PlayStepFwd = new QAction( this, "PlayStepFwd" );
    PlayStepFwd->setIconSet( QIconSet( image7 ) );
    Revert = new QAction( this, "Revert" );
    Revert->setIconSet( QIconSet( image8 ) );
    Reload = new QAction( this, "Reload" );
    Reload->setIconSet( QIconSet( image9 ) );
    PlayRew = new QAction( this, "PlayRew" );
    PlayRew->setIconSet( QIconSet( image10 ) );
    ReplaceCycleInfo = new QAction( this, "ReplaceCycleInfo" );
    ReplaceCycleInfo->setIconSet( QIconSet( image11 ) );
    DisplayImages = new QAction( this, "DisplayImages" );
    DisplayImages->setToggleAction( TRUE );
    DisplayImages->setIconSet( QIconSet( image12 ) );
    LoadImages = new QAction( this, "LoadImages" );
    LoadImages->setIconSet( QIconSet( image13 ) );
    AddLogfile = new QAction( this, "AddLogfile" );
    AddLogfile->setIconSet( QIconSet( image14 ) );
    NextRefState = new QAction( this, "NextRefState" );
    NextRefState->setIconSet( QIconSet( image15 ) );
    PrevRefState = new QAction( this, "PrevRefState" );
    PrevRefState->setIconSet( QIconSet( image16 ) );
    toggleBookmarkAction = new QAction( this, "toggleBookmarkAction" );
    gotoNextBookmarkAction = new QAction( this, "gotoNextBookmarkAction" );
    gotoPrevBookmarkAction = new QAction( this, "gotoPrevBookmarkAction" );
    clearBookmarksAction = new QAction( this, "clearBookmarksAction" );
    useColoredGoalsAction = new QAction( this, "useColoredGoalsAction" );
    useColoredGoalsAction->setToggleAction( TRUE );
    useSyncSignalsAction = new QAction( this, "useSyncSignalsAction" );
    useSyncSignalsAction->setToggleAction( TRUE );
    useGreyRobotsAction = new QAction( this, "useGreyRobotsAction" );
    useGreyRobotsAction->setToggleAction( TRUE );


    // toolbars
    FileToolbar = new QToolBar( QString(""), this, DockTop ); 

    fileExitAction->addTo( FileToolbar );
    Revert->addTo( FileToolbar );
    Reload->addTo( FileToolbar );
    AddLogfile->addTo( FileToolbar );
    LoadImages->addTo( FileToolbar );
    PlayToolbar = new QToolBar( QString(""), this, DockTop ); 

    PrevRefState->addTo( PlayToolbar );
    PlayFastRew->addTo( PlayToolbar );
    PlayRew->addTo( PlayToolbar );
    PlayStepRew->addTo( PlayToolbar );
    StopPlay->addTo( PlayToolbar );
    PlayStepFwd->addTo( PlayToolbar );
    PlayFwd->addTo( PlayToolbar );
    PlayFastFwd->addTo( PlayToolbar );
    NextRefState->addTo( PlayToolbar );
    ExtrasToolbar = new QToolBar( QString(""), this, DockTop ); 

    ReplaceCycleInfo->addTo( ExtrasToolbar );
    DisplayImages->addTo( ExtrasToolbar );


    // menubar
    MenuBar = new QMenuBar( this, "MenuBar" );


    Programm = new QPopupMenu( this );
    Reload->addTo( Programm );
    AddLogfile->addTo( Programm );
    Revert->addTo( Programm );
    LoadImages->addTo( Programm );
    fileExitAction->addTo( Programm );
    MenuBar->insertItem( QString(""), Programm, 1 );

    Abspielen = new QPopupMenu( this );
    PlayFwd->addTo( Abspielen );
    PlayRew->addTo( Abspielen );
    StopPlay->addTo( Abspielen );
    PlayStepFwd->addTo( Abspielen );
    PlayStepRew->addTo( Abspielen );
    PlayFastFwd->addTo( Abspielen );
    PlayFastRew->addTo( Abspielen );
    NextRefState->addTo( Abspielen );
    PrevRefState->addTo( Abspielen );
    MenuBar->insertItem( QString(""), Abspielen, 2 );

    Extras = new QPopupMenu( this );
    ReplaceCycleInfo->addTo( Extras );
    DisplayImages->addTo( Extras );
    MenuBar->insertItem( QString(""), Extras, 3 );

    Lesezeichen = new QPopupMenu( this );
    toggleBookmarkAction->addTo( Lesezeichen );
    gotoPrevBookmarkAction->addTo( Lesezeichen );
    gotoNextBookmarkAction->addTo( Lesezeichen );
    clearBookmarksAction->addTo( Lesezeichen );
    MenuBar->insertItem( QString(""), Lesezeichen, 4 );

    Einstellungen = new QPopupMenu( this );
    useSyncSignalsAction->addTo( Einstellungen );
    useGreyRobotsAction->addTo( Einstellungen );
    useColoredGoalsAction->addTo( Einstellungen );
    MenuBar->insertItem( QString(""), Einstellungen, 5 );

    languageChange();
    resize( QSize(560, 463).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // signals and slots connections
    connect( fileExitAction, SIGNAL( activated() ), this, SLOT( fileExit() ) );
    connect( PlayStepRew, SIGNAL( activated() ), this, SLOT( prevCycle() ) );
    connect( PlayFastFwd, SIGNAL( activated() ), this, SLOT( start_ffw() ) );
    connect( PlayFastRew, SIGNAL( activated() ), this, SLOT( start_frew() ) );
    connect( PlayFwd, SIGNAL( activated() ), this, SLOT( start_play() ) );
    connect( StopPlay, SIGNAL( activated() ), this, SLOT( stop_play() ) );
    connect( cycle_num, SIGNAL( returnPressed() ), this, SLOT( setCycleNum() ) );
    connect( display_rate, SIGNAL( valueChanged(int) ), this, SLOT( change_display_frequency(int) ) );
    connect( display_rate, SIGNAL( sliderMoved(int) ), this, SLOT( change_display_frequency(int) ) );
    connect( cycle_slider, SIGNAL( valueChanged(int) ), this, SLOT( cycle_slider_value_changed(int) ) );
    connect( Revert, SIGNAL( activated() ), this, SLOT( revert_file() ) );
    connect( Reload, SIGNAL( activated() ), this, SLOT( reload_file() ) );
    connect( PlayStepFwd, SIGNAL( activated() ), this, SLOT( nextCycle() ) );
    connect( PlayRew, SIGNAL( activated() ), this, SLOT( start_rew() ) );
    connect( ReplaceCycleInfo, SIGNAL( activated() ), this, SLOT( replaceCycleInfo() ) );
    connect( prog_time, SIGNAL( returnPressed() ), this, SLOT( setTime() ) );
    connect( DisplayImages, SIGNAL( toggled(bool) ), this, SLOT( toogleImageView(bool) ) );
    connect( LoadImages, SIGNAL( activated() ), this, SLOT( loadImages() ) );
    connect( goto_end_button, SIGNAL( clicked() ), this, SLOT( goto_end() ) );
    connect( goto_begin_button, SIGNAL( clicked() ), this, SLOT( goto_start() ) );
    connect( AddLogfile, SIGNAL( activated() ), this, SLOT( loadAdditionalLogfile() ) );
    connect( NextRefState, SIGNAL( activated() ), this, SLOT( nextRefStateCycle() ) );
    connect( PrevRefState, SIGNAL( activated() ), this, SLOT( prevRefStateCycle() ) );
    connect( gotoNextBookmarkAction, SIGNAL( activated() ), this, SLOT( gotoNextBookmark() ) );
    connect( gotoPrevBookmarkAction, SIGNAL( activated() ), this, SLOT( gotoPrevBookmark() ) );
    connect( toggleBookmarkAction, SIGNAL( activated() ), this, SLOT( toggleBookmark() ) );
    connect( clearBookmarksAction, SIGNAL( activated() ), this, SLOT( clearBookmarks() ) );
    connect( useGreyRobotsAction, SIGNAL( toggled(bool) ), this, SLOT( toggleGreyRobots(bool) ) );
    connect( useSyncSignalsAction, SIGNAL( toggled(bool) ), this, SLOT( toggleSyncSignals(bool) ) );
    connect( useColoredGoalsAction, SIGNAL( toggled(bool) ), this, SLOT( toggleColoredGaols(bool) ) );

    // tab order
    setTabOrder( field_of_play, goto_begin_button );
    setTabOrder( goto_begin_button, cycle_slider );
    setTabOrder( cycle_slider, goto_end_button );
    setTabOrder( goto_end_button, cycle_num );
    setTabOrder( cycle_num, prog_time );
    setTabOrder( prog_time, display_rate );
}

/*
 *  Destroys the object and frees any allocated resources
 */
TribotsviewMainWidget::~TribotsviewMainWidget()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void TribotsviewMainWidget::languageChange()
{
    setCaption( tr( "TribotsviewMainWidget" ) );
    groupBox1->setTitle( QString::null );
    goto_begin_button->setText( tr( "Anfang" ) );
    goto_end_button->setText( tr( "Ende" ) );
    groupBox11->setTitle( QString::null );
    textLabel2->setText( tr( "Zeit:" ) );
    cycle_num->setText( QString::null );
    textLabel1->setText( tr( "Iteration:" ) );
    textLabel1_7->setText( tr( "Verhalten:" ) );
    textLabel3->setText( tr( "Ball:" ) );
    textLabel2_2->setText( tr( "Robotergeschw. ist/soll:" ) );
    fileExitAction->setText( tr( "Beenden" ) );
    fileExitAction->setMenuText( tr( "Beenden" ) );
    fileExitAction->setAccel( QString::null );
    PlayFwd->setText( tr( "Abspielen" ) );
    PlayFastFwd->setText( tr( "Vorspulen" ) );
    PlayFastRew->setText( trUtf8( "\x5a\x75\x72\xc3\xbc\x63\x6b\x73\x70\x75\x6c\x65\x6e" ) );
    StopPlay->setText( tr( "Stop" ) );
    PlayStepRew->setText( trUtf8( "\x45\x69\x6e\x7a\x65\x6c\x73\x63\x68\x72\x69\x74\x74\x20\x7a\x75\x72\xc3\xbc\x63\x6b"
    "" ) );
    PlayStepFwd->setText( tr( "Einzelschritt" ) );
    Revert->setText( tr( "Logdateien erneut laden" ) );
    Reload->setText( tr( "Logdatei laden" ) );
    PlayRew->setText( trUtf8( "\x52\xc3\xbc\x63\x6b\x77\xc3\xa4\x72\x74\x73" ) );
    ReplaceCycleInfo->setText( trUtf8( "\x52\x6f\x62\x6f\x74\x65\x72\x70\x6f\x73\x69\x74\x69\x6f\x6e\x20\xc3\xbc\x62\x65\x72"
    "\x6e\x65\x68\x6d\x65\x6e" ) );
    DisplayImages->setText( tr( "Bilder anzeigen" ) );
    DisplayImages->setWhatsThis( QString::null );
    LoadImages->setText( tr( "Bilder laden" ) );
    AddLogfile->setText( trUtf8( "\x5a\x75\x73\xc3\xa4\x74\x7a\x6c\x69\x63\x68\x65\x73\x20\x4c\x6f\x67\x66\x69\x6c\x65"
    "\x20\x6c\x61\x64\x65\x6e" ) );
    NextRefState->setText( tr( "Next Ref State" ) );
    NextRefState->setMenuText( tr( "Next Ref State" ) );
    NextRefState->setToolTip( tr( "Next Ref State" ) );
    PrevRefState->setText( tr( "Prev Ref State" ) );
    toggleBookmarkAction->setText( trUtf8( "\x4c\x65\x73\x65\x7a\x65\x69\x63\x68\x65\x6e\x20\x73\x65\x74\x7a\x65\x6e\x2f\x6c\xc3"
    "\xb6\x73\x63\x68\x65\x6e" ) );
    toggleBookmarkAction->setAccel( tr( "Ctrl+B" ) );
    gotoNextBookmarkAction->setText( trUtf8( "\x6e\xc3\xa4\x63\x68\x73\x74\x65\x73\x20\x4c\x65\x73\x65\x7a\x65\x69\x63\x68\x65\x6e"
    "" ) );
    gotoNextBookmarkAction->setAccel( tr( "Alt+PgDown" ) );
    gotoPrevBookmarkAction->setText( tr( "vorheriges Lesezeichen" ) );
    gotoPrevBookmarkAction->setAccel( tr( "Alt+PgUp" ) );
    clearBookmarksAction->setText( trUtf8( "\x41\x6c\x6c\x65\x20\x4c\x65\x73\x65\x7a\x65\x69\x63\x68\x65\x6e\x20\x6c\xc3\xb6\x73"
    "\x63\x68\x65\x6e" ) );
    useColoredGoalsAction->setText( tr( "Anzeige bunter Tore" ) );
    useSyncSignalsAction->setText( tr( "Synchronisation mit Hilfe von Synchronisationssignalen" ) );
    useGreyRobotsAction->setText( tr( "Anzeige deaktivierter Roboter in grau" ) );
    FileToolbar->setLabel( tr( "Programm" ) );
    PlayToolbar->setLabel( tr( "Abspielen" ) );
    ExtrasToolbar->setLabel( tr( "Extras" ) );
    if (MenuBar->findItem(1))
        MenuBar->findItem(1)->setText( tr( "Programm" ) );
    if (MenuBar->findItem(2))
        MenuBar->findItem(2)->setText( tr( "Abspielen" ) );
    if (MenuBar->findItem(3))
        MenuBar->findItem(3)->setText( tr( "Extras" ) );
    if (MenuBar->findItem(4))
        MenuBar->findItem(4)->setText( tr( "Lesezeichen" ) );
    if (MenuBar->findItem(5))
        MenuBar->findItem(5)->setText( tr( "Einstellungen" ) );
}

