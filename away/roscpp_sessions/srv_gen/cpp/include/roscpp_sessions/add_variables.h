/* Auto-generated by genmsg_cpp for file /home/tribot/ros/opentribot/roscpp_sessions/srv/add_variables.srv */
#ifndef ROSCPP_SESSIONS_SERVICE_ADD_VARIABLES_H
#define ROSCPP_SESSIONS_SERVICE_ADD_VARIABLES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace roscpp_sessions
{
template <class ContainerAllocator>
struct add_variablesRequest_ : public ros::Message
{
  typedef add_variablesRequest_<ContainerAllocator> Type;

  add_variablesRequest_()
  : variable1()
  , variable2()
  , result()
  {
  }

  add_variablesRequest_(const ContainerAllocator& _alloc)
  : variable1(_alloc)
  , variable2(_alloc)
  , result(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _variable1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  variable1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _variable2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  variable2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  result;


private:
  static const char* __s_getDataType_() { return "roscpp_sessions/add_variablesRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d14cc3cb09d105ec5c963edd2748d6fb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d14cc3cb09d105ec5c963edd2748d6fb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string variable1\n\
string variable2\n\
string result\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, variable1);
    ros::serialization::serialize(stream, variable2);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, variable1);
    ros::serialization::deserialize(stream, variable2);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(variable1);
    size += ros::serialization::serializationLength(variable2);
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct add_variablesRequest
typedef  ::roscpp_sessions::add_variablesRequest_<std::allocator<void> > add_variablesRequest;

typedef boost::shared_ptr< ::roscpp_sessions::add_variablesRequest> add_variablesRequestPtr;
typedef boost::shared_ptr< ::roscpp_sessions::add_variablesRequest const> add_variablesRequestConstPtr;


template <class ContainerAllocator>
struct add_variablesResponse_ : public ros::Message
{
  typedef add_variablesResponse_<ContainerAllocator> Type;

  add_variablesResponse_()
  {
  }

  add_variablesResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "roscpp_sessions/add_variablesResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d14cc3cb09d105ec5c963edd2748d6fb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct add_variablesResponse
typedef  ::roscpp_sessions::add_variablesResponse_<std::allocator<void> > add_variablesResponse;

typedef boost::shared_ptr< ::roscpp_sessions::add_variablesResponse> add_variablesResponsePtr;
typedef boost::shared_ptr< ::roscpp_sessions::add_variablesResponse const> add_variablesResponseConstPtr;

struct add_variables
{

typedef add_variablesRequest Request;
typedef add_variablesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct add_variables
} // namespace roscpp_sessions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d14cc3cb09d105ec5c963edd2748d6fb";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd14cc3cb09d105ecULL;
  static const uint64_t static_value2 = 0x5c963edd2748d6fbULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscpp_sessions/add_variablesRequest";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string variable1\n\
string variable2\n\
string result\n\
\n\
";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscpp_sessions/add_variablesResponse";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roscpp_sessions::add_variablesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.variable1);
    stream.next(m.variable2);
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct add_variablesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roscpp_sessions::add_variablesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct add_variablesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<roscpp_sessions::add_variables> {
  static const char* value() 
  {
    return "d14cc3cb09d105ec5c963edd2748d6fb";
  }

  static const char* value(const roscpp_sessions::add_variables&) { return value(); } 
};

template<>
struct DataType<roscpp_sessions::add_variables> {
  static const char* value() 
  {
    return "roscpp_sessions/add_variables";
  }

  static const char* value(const roscpp_sessions::add_variables&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<roscpp_sessions::add_variablesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d14cc3cb09d105ec5c963edd2748d6fb";
  }

  static const char* value(const roscpp_sessions::add_variablesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<roscpp_sessions::add_variablesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscpp_sessions/add_variables";
  }

  static const char* value(const roscpp_sessions::add_variablesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<roscpp_sessions::add_variablesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d14cc3cb09d105ec5c963edd2748d6fb";
  }

  static const char* value(const roscpp_sessions::add_variablesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<roscpp_sessions::add_variablesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roscpp_sessions/add_variables";
  }

  static const char* value(const roscpp_sessions::add_variablesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROSCPP_SESSIONS_SERVICE_ADD_VARIABLES_H

